from scipy import sparsefrom numpy import arraydef svm_read_problem(data_file_name):    """    svm_read_problem(data_file_name) -> [y, x]    Read LIBSVM-format data from data_file_name and return labels y    and data instances x.    @data_file_name: string,  file name    @return: tuple, containing two elements:    @ list of float, y labels    @ list of dictionaries, each dict contains the index:value paris for             a observation    """    prob_y = []    prob_x = []    for line in open(data_file_name):        # split by white space. one split        line = line.split(None, 1)        # In case an instance with all zero features        if len(line) == 1:            line += ['']        label, features = line        xi = {}        for e in features.split():            ind, val = e.split(":")            xi[int(ind)] = float(val)        prob_y.append(float(label))        prob_x.append(xi)    return (prob_y, prob_x)def buildXmatix(prob_x):    """    build the sparse matrix for data feature X    @prob_x: list of dictionaries, each dict contains the index:value paris for             a observation    @return: n * d csr sparse matrix. n: # of observation. d : # of features    """    # initiation    row = []    col = []    entry = []    # transform the data from dict to sparse matrix    # also find max column index in the matrix    max_ind = 0    for row_ind in range(len(prob_x)):        for ind, val in prob_x[row_ind].items():            row.append(row_ind)            col.append(ind - 1)            entry.append(val)            # find max column index in the matrix            if max_ind < ind:                max_ind = ind    n = len(prob_x)    d = max_ind    row = array(row)  # array is from numpy module    col = array(col)    entry = array(entry)  #  print(n, m)  #  return (row,col, entry)    X = sparse.coo_matrix((entry, (row, col)), shape=(n, d)).tocsr()    return Xif __name__ == "__main__":  # just for testing    prob_y, prob_x = svm_read_problem('mushrooms')        X = buildXmatix(prob_x)